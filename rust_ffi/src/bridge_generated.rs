#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.

use core::panic::UnwindSafe;
use std::{ffi::c_void, sync::Arc};

use flutter_rust_bridge::{rust2dart::IntoIntoDart, *};

use crate::api::*;

// Section: imports

// Section: wire functions

fn wire_process_runner_impl(
    port_: MessagePort,
    mode: impl Wire2Api<TraceMode> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    execute_path: impl Wire2Api<String> + UnwindSafe,
    monitor_path: impl Wire2Api<String> + UnwindSafe,
    working_dir: impl Wire2Api<String> + UnwindSafe,
    sleep_count: impl Wire2Api<i32> + UnwindSafe,
    sleep_millis: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (i64, i64, bool), _>(
        WrapInfo {
            debug_name: "process_runner",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mode = mode.wire2api();
            let api_name = name.wire2api();
            let api_execute_path = execute_path.wire2api();
            let api_monitor_path = monitor_path.wire2api();
            let api_working_dir = working_dir.wire2api();
            let api_sleep_count = sleep_count.wire2api();
            let api_sleep_millis = sleep_millis.wire2api();
            move |task_callback| {
                process_runner(
                    api_mode,
                    api_name,
                    api_execute_path,
                    api_monitor_path,
                    api_working_dir,
                    api_sleep_count,
                    api_sleep_millis,
                )
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<TraceMode> for i32 {
    fn wire2api(self) -> TraceMode {
        match self {
            0 => TraceMode::Simple,
            1 => TraceMode::ByName,
            _ => unreachable!("Invalid variant for TraceMode: {}", self),
        }
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
