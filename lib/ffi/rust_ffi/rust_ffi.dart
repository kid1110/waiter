// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class RustFfi {
  /// find and trace stared process then get end_time and exit_code
  Future<(int, int, bool)> processRunner(
      {required TraceMode mode,
      required String name,
      required String executePath,
      required String monitorPath,
      required String workingDir,
      required int sleepCount,
      required int sleepMillis,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProcessRunnerConstMeta;

  /// get system proxy settings, support windows, macos and linux
  Future<(bool, String, int)> getSystemProxy({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSystemProxyConstMeta;
}

/// trace mode
enum TraceMode {
  /// Wait child process to exit
  Simple,

  /// Search process by given name and wait them all exit
  ByName,
}

class RustFfiImpl implements RustFfi {
  final RustFfiPlatform _platform;
  factory RustFfiImpl(ExternalLibrary dylib) =>
      RustFfiImpl.raw(RustFfiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustFfiImpl.wasm(FutureOr<WasmModule> module) =>
      RustFfiImpl(module as ExternalLibrary);
  RustFfiImpl.raw(this._platform);
  Future<(int, int, bool)> processRunner(
      {required TraceMode mode,
      required String name,
      required String executePath,
      required String monitorPath,
      required String workingDir,
      required int sleepCount,
      required int sleepMillis,
      dynamic hint}) {
    var arg0 = api2wire_trace_mode(mode);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_String(executePath);
    var arg3 = _platform.api2wire_String(monitorPath);
    var arg4 = _platform.api2wire_String(workingDir);
    var arg5 = api2wire_i32(sleepCount);
    var arg6 = _platform.api2wire_u64(sleepMillis);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_process_runner(port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api___record__i64_i64_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kProcessRunnerConstMeta,
      argValues: [
        mode,
        name,
        executePath,
        monitorPath,
        workingDir,
        sleepCount,
        sleepMillis
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProcessRunnerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "process_runner",
        argNames: [
          "mode",
          "name",
          "executePath",
          "monitorPath",
          "workingDir",
          "sleepCount",
          "sleepMillis"
        ],
      );

  Future<(bool, String, int)> getSystemProxy({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_system_proxy(port_),
      parseSuccessData: _wire2api___record__bool_String_u16,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetSystemProxyConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSystemProxyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_system_proxy",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  (bool, String, int) _wire2api___record__bool_String_u16(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      _wire2api_bool(arr[0]),
      _wire2api_String(arr[1]),
      _wire2api_u16(arr[2]),
    );
  }

  (int, int, bool) _wire2api___record__i64_i64_bool(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      _wire2api_i64(arr[0]),
      _wire2api_i64(arr[1]),
      _wire2api_bool(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_trace_mode(TraceMode raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustFfiPlatform extends FlutterRustBridgeBase<RustFfiWire> {
  RustFfiPlatform(ffi.DynamicLibrary dylib) : super(RustFfiWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustFfiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustFfiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustFfiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_process_runner(
    int port_,
    int mode,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> execute_path,
    ffi.Pointer<wire_uint_8_list> monitor_path,
    ffi.Pointer<wire_uint_8_list> working_dir,
    int sleep_count,
    int sleep_millis,
  ) {
    return _wire_process_runner(
      port_,
      mode,
      name,
      execute_path,
      monitor_path,
      working_dir,
      sleep_count,
      sleep_millis,
    );
  }

  late final _wire_process_runnerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Uint64)>>('wire_process_runner');
  late final _wire_process_runner = _wire_process_runnerPtr.asFunction<
      void Function(
          int,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          int)>();

  void wire_get_system_proxy(
    int port_,
  ) {
    return _wire_get_system_proxy(
      port_,
    );
  }

  late final _wire_get_system_proxyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_system_proxy');
  late final _wire_get_system_proxy =
      _wire_get_system_proxyPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
