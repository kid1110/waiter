// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

import 'api/app_scan.dart';
import 'api/simple.dart';
import 'api/win_icon.dart';
import 'frb_generated.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  CommonAppScanSetting dco_decode_box_autoadd_common_app_scan_setting(
      dynamic raw);

  @protected
  CommonAppScanSetting dco_decode_common_app_scan_setting(dynamic raw);

  @protected
  CommonAppScannedEntry dco_decode_common_app_scanned_entry(dynamic raw);

  @protected
  CommonAppScannedEntryStatus dco_decode_common_app_scanned_entry_status(
      dynamic raw);

  @protected
  CommonAppScannedEntryType dco_decode_common_app_scanned_entry_type(
      dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<CommonAppScannedEntry> dco_decode_list_common_app_scanned_entry(
      dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<CommonAppScannedEntry>? dco_decode_opt_list_common_app_scanned_entry(
      dynamic raw);

  @protected
  (bool, String, int) dco_decode_record_bool_string_u_16(dynamic raw);

  @protected
  (PlatformInt64, PlatformInt64, bool) dco_decode_record_i_64_i_64_bool(
      dynamic raw);

  @protected
  TraceMode dco_decode_trace_mode(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  CommonAppScanSetting sse_decode_box_autoadd_common_app_scan_setting(
      SseDeserializer deserializer);

  @protected
  CommonAppScanSetting sse_decode_common_app_scan_setting(
      SseDeserializer deserializer);

  @protected
  CommonAppScannedEntry sse_decode_common_app_scanned_entry(
      SseDeserializer deserializer);

  @protected
  CommonAppScannedEntryStatus sse_decode_common_app_scanned_entry_status(
      SseDeserializer deserializer);

  @protected
  CommonAppScannedEntryType sse_decode_common_app_scanned_entry_type(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<CommonAppScannedEntry> sse_decode_list_common_app_scanned_entry(
      SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<CommonAppScannedEntry>? sse_decode_opt_list_common_app_scanned_entry(
      SseDeserializer deserializer);

  @protected
  (bool, String, int) sse_decode_record_bool_string_u_16(
      SseDeserializer deserializer);

  @protected
  (PlatformInt64, PlatformInt64, bool) sse_decode_record_i_64_i_64_bool(
      SseDeserializer deserializer);

  @protected
  TraceMode sse_decode_trace_mode(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_common_app_scan_setting(
      CommonAppScanSetting self, SseSerializer serializer);

  @protected
  void sse_encode_common_app_scan_setting(
      CommonAppScanSetting self, SseSerializer serializer);

  @protected
  void sse_encode_common_app_scanned_entry(
      CommonAppScannedEntry self, SseSerializer serializer);

  @protected
  void sse_encode_common_app_scanned_entry_status(
      CommonAppScannedEntryStatus self, SseSerializer serializer);

  @protected
  void sse_encode_common_app_scanned_entry_type(
      CommonAppScannedEntryType self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_common_app_scanned_entry(
      List<CommonAppScannedEntry> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_common_app_scanned_entry(
      List<CommonAppScannedEntry>? self, SseSerializer serializer);

  @protected
  void sse_encode_record_bool_string_u_16(
      (bool, String, int) self, SseSerializer serializer);

  @protected
  void sse_encode_record_i_64_i_64_bool(
      (PlatformInt64, PlatformInt64, bool) self, SseSerializer serializer);

  @protected
  void sse_encode_trace_mode(TraceMode self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;
}
